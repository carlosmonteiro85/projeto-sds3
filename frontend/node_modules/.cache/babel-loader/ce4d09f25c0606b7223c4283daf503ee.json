{"ast":null,"code":"var _jsxFileName = \"/home/carlos/desenvolvimento/workspace/projeto-sds3/frontend/src/components/DunotCharts/index.tsx\";\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\nimport { BASE_URL } from 'utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DunotChats = () => {\n  //forma errada\n  let chartData = {\n    labels: [],\n    series: []\n  }; //forma errada\n\n  axios.get(`${BASE_URL}/sales/amount-by-seller`)\n  /* Define uma função para quando a resposta chegar */\n  .then(response => {\n    const data = response.data;\n    const mylabels = data.map(x => x.sellerName);\n    const mySeries = data.map(x => x.sum);\n    chartData = {\n      labels: mylabels,\n      series: mySeries\n    };\n    console.log(chartData);\n  });\n  /*    const mockData = {\n         series: [477138, 499928, 444867, 220426, 473088],\n         labels: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n     } */\n\n  const options = {\n    legend: {\n      show: true\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      labels: chartData.labels\n    },\n    series: chartData.series,\n    type: \"donut\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }, this);\n};\n\n_c = DunotChats;\nexport default DunotChats;\n\nvar _c;\n\n$RefreshReg$(_c, \"DunotChats\");","map":{"version":3,"sources":["/home/carlos/desenvolvimento/workspace/projeto-sds3/frontend/src/components/DunotCharts/index.tsx"],"names":["axios","Chart","BASE_URL","DunotChats","chartData","labels","series","get","then","response","data","mylabels","map","x","sellerName","mySeries","sum","console","log","options","legend","show"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;;AAOA,MAAMC,UAAU,GAAG,MAAM;AAErB;AACA,MAAIC,SAAqB,GAAG;AAAEC,IAAAA,MAAM,EAAE,EAAV;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAA5B,CAHqB,CAKrB;;AACAN,EAAAA,KAAK,CAACO,GAAN,CAAW,GAAEL,QAAS,yBAAtB;AACA;AADA,GAEKM,IAFL,CAEWC,QAAQ,IAAI;AACf,UAAMC,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACA,UAAMC,QAAQ,GAAGD,IAAI,CAACE,GAAL,CAAUC,CAAC,IAAIA,CAAC,CAACC,UAAjB,CAAjB;AACA,UAAMC,QAAQ,GAAGL,IAAI,CAACE,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACG,GAAhB,CAAjB;AAEAZ,IAAAA,SAAS,GAAG;AAAEC,MAAAA,MAAM,EAAEM,QAAV;AAAoBL,MAAAA,MAAM,EAAES;AAA5B,KAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYd,SAAZ;AACH,GATL;AAWH;AACD;AACA;AACA;;AAEI,QAAMe,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAE;AACJC,MAAAA,IAAI,EAAE;AADF;AADI,GAAhB;AAMA,sBACE,QAAC,KAAD;AACM,IAAA,OAAO,EAAE,EAAE,GAAGF,OAAL;AAAcd,MAAAA,MAAM,EAAED,SAAS,CAACC;AAAhC,KADf;AAEM,IAAA,MAAM,EAAED,SAAS,CAACE,MAFxB;AAGM,IAAA,IAAI,EAAC,OAHX;AAIM,IAAA,MAAM,EAAC;AAJb;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CApCH;;KAAMH,U;AAsCJ,eAAeA,UAAf","sourcesContent":["import axios from 'axios';\nimport Chart from 'react-apexcharts';\nimport { SaleSum } from 'types/sale';\nimport { BASE_URL } from 'utils/requests';\n\ntype ChartData = {\n    labels: string[];\n    series: number[];\n}\n\nconst DunotChats = () => {\n\n    //forma errada\n    let chartData : ChartData = { labels: [], series: []};\n\n    //forma errada\n    axios.get(`${BASE_URL}/sales/amount-by-seller`)\n    /* Define uma função para quando a resposta chegar */\n        .then( response => {\n            const data = response.data as SaleSum[];\n            const mylabels = data.map (x => x.sellerName);\n            const mySeries = data.map(x => x.sum);\n\n            chartData = { labels: mylabels, series: mySeries};\n            console.log(chartData);\n        })\n\n /*    const mockData = {\n        series: [477138, 499928, 444867, 220426, 473088],\n        labels: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n    } */\n    \n    const options = {\n        legend: {\n            show: true\n        }\n    }\n\n    return (        \n      <Chart \n            options={{ ...options, labels: chartData.labels}}\n            series={chartData.series}\n            type=\"donut\"\n            height=\"240\"\n      />     \n    );\n  }\n  \n  export default DunotChats;"]},"metadata":{},"sourceType":"module"}