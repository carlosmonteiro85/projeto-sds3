{"ast":null,"code":"var _jsxFileName = \"/home/carlos/desenvolvimento/workspace/projeto-sds3/frontend/src/components/BarChart/index.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { round } from 'utils/format';\nimport { BASE_URL } from 'utils/requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BarChart = () => {\n  _s();\n\n  const [chartData, setChartData] = useState({\n    labels: {\n      categories: []\n    },\n    series: [{\n      name: \"\",\n      data: []\n    }]\n  });\n  useEffect(() => {\n    axios.get(`${BASE_URL}/sales/sucess-by-seller`)\n    /* Define uma função para quando a resposta chegar */\n    .then(response => {\n      const data = response.data;\n      const myLabels = data.map(x => round(100.0 * x.deals / x.visited, 1));\n      const mySeries = data.map(x => x.sellerName);\n      setChartData({\n        labels: {\n          categories: myLabels\n        },\n        series: [{\n          mySeries\n        }]\n      });\n    });\n  }, []);\n  const options = {\n    plotOptions: {\n      bar: {\n        horizontal: true\n      }\n    }\n  };\n  const mockData = {\n    labels: {\n      categories: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n    },\n    series: [{\n      name: \"% Sucesso\",\n      data: [43.6, 67.1, 67.7, 45.6, 71.1]\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Chart, {\n    options: { ...options,\n      xaxis: mockData.labels\n    },\n    series: mockData.series,\n    type: \"bar\",\n    height: \"240\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 7\n  }, this);\n};\n\n_s(BarChart, \"acwQt+D0kLGJB+xZcOXOwUNqo9A=\");\n\n_c = BarChart;\nexport default BarChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"BarChart\");","map":{"version":3,"sources":["/home/carlos/desenvolvimento/workspace/projeto-sds3/frontend/src/components/BarChart/index.tsx"],"names":["axios","useEffect","useState","Chart","round","BASE_URL","BarChart","chartData","setChartData","labels","categories","series","name","data","get","then","response","myLabels","map","x","deals","visited","mySeries","sellerName","options","plotOptions","bar","horizontal","mockData","xaxis"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,QAAT,QAAyB,gBAAzB;;;AAgBA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAEnB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAY;AAClDO,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,EAAE;AADR,KAD0C;AAIlDC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,EADV;AAEIC,MAAAA,IAAI,EAAE;AAFV,KADI;AAJ0C,GAAZ,CAA1C;AAYAZ,EAAAA,SAAS,CAAE,MAAM;AACbD,IAAAA,KAAK,CAACc,GAAN,CAAW,GAAET,QAAS,yBAAtB;AACA;AADA,KAEKU,IAFL,CAEWC,QAAQ,IAAI;AACf,YAAMH,IAAI,GAAGG,QAAQ,CAACH,IAAtB;AACA,YAAMI,QAAQ,GAAGJ,IAAI,CAACK,GAAL,CAASC,CAAC,IAAIf,KAAK,CAAC,QAAQe,CAAC,CAACC,KAAV,GAAkBD,CAAC,CAACE,OAArB,EAA8B,CAA9B,CAAnB,CAAjB;AACA,YAAMC,QAAQ,GAAGT,IAAI,CAACK,GAAL,CAAUC,CAAC,IAAIA,CAAC,CAACI,UAAjB,CAAjB;AAEAf,MAAAA,YAAY,CAAC;AACTC,QAAAA,MAAM,EAAE;AACJC,UAAAA,UAAU,EAAEO;AADR,SADC;AAITN,QAAAA,MAAM,EAAE,CACJ;AACIW,UAAAA;AADJ,SADI;AAJC,OAAD,CAAZ;AAUH,KAjBL;AAkBH,GAnBQ,EAmBN,EAnBM,CAAT;AAuBA,QAAME,OAAO,GAAG;AACZC,IAAAA,WAAW,EAAE;AACTC,MAAAA,GAAG,EAAE;AACDC,QAAAA,UAAU,EAAE;AADX;AADI;AADD,GAAhB;AAOA,QAAMC,QAAQ,GAAG;AACbnB,IAAAA,MAAM,EAAE;AACJC,MAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,aAAX,EAA0B,QAA1B,EAAoC,OAApC,EAA6C,OAA7C;AADR,KADK;AAIbC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,IAAI,EAAE,WADV;AAEIC,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB;AAFV,KADI;AAJK,GAAjB;AAYA,sBACE,QAAC,KAAD;AACM,IAAA,OAAO,EAAE,EAAE,GAAGW,OAAL;AAAcK,MAAAA,KAAK,EAAED,QAAQ,CAACnB;AAA9B,KADf;AAEM,IAAA,MAAM,EAAEmB,QAAQ,CAACjB,MAFvB;AAGM,IAAA,IAAI,EAAC,KAHX;AAIM,IAAA,MAAM,EAAC;AAJb;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAhEH;;GAAML,Q;;KAAAA,Q;AAkEJ,eAAeA,QAAf","sourcesContent":["import axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport Chart from 'react-apexcharts';\nimport { SaleSucess } from 'types/sale';\nimport { round } from 'utils/format';\nimport { BASE_URL } from 'utils/requests';\n\ntype SeriesData = {\n    name: string;\n    data: number [];\n}\n\ntype ChartData = {\n    labels: {\n        categories: string[];\n    }\n    series: SeriesData[];\n}\n\n\n\nconst BarChart = () => {\n\n    const [chartData, setChartData] = useState<ChartData>({\n        labels: {\n            categories: []\n        },\n        series: [\n            {\n                name: \"\",\n                data: []                   \n            }\n        ]\n    });\n\n    useEffect( () => {\n        axios.get(`${BASE_URL}/sales/sucess-by-seller`)\n        /* Define uma função para quando a resposta chegar */\n            .then( response => {\n                const data = response.data as SaleSucess[];\n                const myLabels = data.map(x => round(100.0 * x.deals / x.visited, 1));\n                const mySeries = data.map (x => x.sellerName);\n    \n                setChartData({\n                    labels: {\n                        categories: myLabels\n                    },\n                    series: [\n                        {\n                            mySeries                 \n                        }\n                    ]\n                }) ;\n            });\n    }, []);\n\n\n\n    const options = {\n        plotOptions: {\n            bar: {\n                horizontal: true,\n            }\n        },\n    };\n    const mockData = {\n        labels: {\n            categories: ['Anakin', 'Barry Allen', 'Kal-El', 'Logan', 'Padmé']\n        },\n        series: [\n            {\n                name: \"% Sucesso\",\n                data: [43.6, 67.1, 67.7, 45.6, 71.1]                   \n            }\n        ]\n    };\n\n    return (        \n      <Chart \n            options={{ ...options, xaxis: mockData.labels}}\n            series={mockData.series}\n            type=\"bar\"\n            height=\"240\"\n      />     \n    );\n  }\n  \n  export default BarChart;"]},"metadata":{},"sourceType":"module"}